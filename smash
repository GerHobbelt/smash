#!/usr/bin/env node

var smash = require("./"),
    optimist = require("optimist");

var argv = optimist
    .usage("Usage: \033[1msmash\033[0m [options] [file â€¦]\n\n"

+ "Version: " + smash.version + "\n\n"

+ "Concatenates one or more input files, outputting a single merged file.\n"
+ "Any import statements in the input files are expanded in-place to the\n"
+ "contents of the imported file. If the same file is imported multiple\n"
+ "times, only the first instance of the file is included.")

    .options("list", {
      describe: "output a list of imported files",
      type: "boolean",
      default: false
    })
    .options("graph", {
      describe: "output the import network in Makefile format",
      type: "boolean",
      default: false
    })
    .options("modules", {
      describe: "ouput the import network in Makefile format",
      type: "boolean",
      default: false
    })
    .options("help", {
      describe: "display this helpful message",
      type: "boolean",
      default: false
    })
    .check(function(argv) {
      if (argv.help) return;
      if (!argv._.length) throw new Error("input required");
      if (argv.list && argv.graph) throw new Error("--list and --graph are exclusive");
    })
    .argv;

if (argv.help) return optimist.showHelp();

if (argv.graph) return void smash.readGraph(argv._, function(error, files) {
  if (error) throw error;
  for (var file in files) console.log(file + ": " + files[file].join(" "));
});

if (argv.modules) return void smash.readGraph(argv._, function(error, files) {
  var wkModule = [];

  argv.targetDir = argv.targetDir || '';

  if (error) throw error;
  modules = [];

  for (var file in files){

    requiredModules = [];
    for (var i = 0; i < files[file].length; i++) {
        requiredModules.push("'" + pathToModuleName(files[file][i], argv.basePath) + "'");
    }
    wkModule = "    '" + pathToModuleName(file, argv) + "': {\n"
             + "        path: '" + argv.targetDir + stripBasePath(file, argv.basePath) + "'";
    if (requiredModules.length > 0) {
         wkModule = wkModule + ",\n        requires: [" + requiredModules.join(", ") + "]\n";
    }
    wkModule = wkModule + "    }";

    modules.push(wkModule);
  }

  console.log("modules: {");
  console.log(modules.join(",\n"))
  console.log("}\n");
});

if (argv.list) return void smash.readAllImports(argv._, function(error, files) {
  if (error) throw error;
  console.log(files.join("\n"));
});

smash(argv._).pipe(process.stdout);

function stripBasePath(path, basePath) {
    var newFileName = path;

    if (basePath) {
        newFileName = newFileName.replace(basePath, "");
    }

    return newFileName;
}

function pathToModuleName(path, basePath) {
    var moduleName = path;

    if (basePath) {
        moduleName = stripBasePath(moduleName, basePath);
    }

    moduleName = moduleName.replace("/", "-");
    moduleName = moduleName.replace(".js", "");

    return moduleName;
}
